# Original model by Michelle Sims:
# Model 2: Model with random effects for slope and intercept and latitude quadratic plus 
# overdispersion - this time I did log distance
# adjusted model  - now computes residuals and computes bayesian p-value using deviance

# converted to run in JAGS - TE
# Random effects for slope and intercept and takes no covariate. 
#
# Changed the likelihood from Poisson to Normal 2021-11-05

# 2020-03-10
# 2020-09-10 Modified to make it without covariates

model{
	for(i in 1:N){
		log.count[i] ~ dnorm(log(mu[i]), tau.y)
		resid[i] <- log.count[i] - log(mu[i])  # computes residuals
		log(mu[i]) <- a0[beach[i]] + a1[beach[i]] * yearc[i]  + epsilon[i]
		
		# overdispersion part - if sigma.e >> 0, then overdispersed according to the publication
		epsilon[i] ~ dnorm(0, tau.e)    

		loglik[i] <- logdensity.norm(log.count[i], log(mu[i]), tau.y)
	}

	for(j in 1:nbeach){
		a0[j] <- B[j,1]
		a1[j] <- B[j,2]
		B[j,1:2] ~ dmnorm(B.hat[j,], Tau.B[,])
		
		B.hat[j,1] <- mu.a0
		B.hat[j,2] <- mu.a1[j]  # 2nd order polynomial fit
		
		mu.a1[j] <- m.a1 + delta1 * latc[j] + delta2 * latc2[j]
		
		a0pc[j] <- exp(a0[j])
		a1pc[j] <- (exp(a1[j])-1) * 100
		rea0[j] <- a0[j] - mu.a0
		rea1[j] <- a1[j] - mu.a1[j]

	}

	delta1 ~ dnorm(0, 0.01)
	delta2 ~ dnorm(0, 0.01)
	
	m.a1 ~ dnorm(0, 0.01)
	mu.a0 ~ dnorm(0, 0.01)
	
	Tau.B[1:2,1:2] <- inverse(Sigma.B[,])
	
	Sigma.B[1,1] <- pow(sigma.a0, 2)
 	Sigma.B[2,2] <- pow(sigma.a1, 2)
	Sigma.B[1,2] <- rho * sigma.a0 * sigma.a1
	Sigma.B[2,1] <- rho * sigma.a0 * sigma.a1
	
	sigma.a0 ~ dgamma(2, 0.5) #dunif(0, 100)
	sigma.a1 ~ dgamma(2, 0.5) #dunif(0, 100)
	
	rho ~ dunif(-1, 1)
	tau.e <- pow(sigma.e, -2)
	sigma.e ~ dgamma(2, 0.5) #dunif(0, 100)

	tau.y <- pow(sigma.y, -2)
	sigma.y ~ dgamma(2, 0.5) #dunif(0, 100)
}
