# Original model by Michelle Sims:
# Model 2: Model with random effects for slope and intercept and latitude quadratic plus 
# overdispersion - this time I did log distance
# adjusted model  - now computes residuals and computes bayesian p-value using deviance

# converted to run in JAGS - TE
# Random effects for slope and intercept and takes 1 covariate. 

# 2020-03-10

model{
	for(i in 1:N){
		count[i] ~ dpois(mu[i])
		resid[i] <- count[i] - mu[i]  # computes residuals
		log(mu[i]) <- a0 + a1 * yearc[i] + a2 * yearc[i] * yearc[i] + beta * X[i] + epsilon[i]
		
		# overdispersion part - if sigma.e >> 0, then overdispersed according to the publication
		epsilon[i] ~ dnorm(0, tau.e)    

		# goodness of fit
		countpred[i] ~ dpois(mu[i])    # obtain predicted values
		
		# log likelihood of predicted 
		loglikpre[i] <- countpred[i] * log(mu[i]) - mu[i] + logfact(countpred[i])   
		
		# log likelihood of observed values
		loglikobs[i] <- count[i] * log(mu[i]) - mu[i] + logfact(count[i])       

		loglik[i] <- logdensity.pois(count[i], mu[i])
	}

	Devobs <- -2*sum(loglikobs[1:N])         # deviance of observed value
	Devpred <- -2*sum(loglikpre[1:N])        # deviance of predicted values
	DiffDev <- Devpred-Devobs                # difference between deviances#
	probP <- step(DiffDev)					 #  has value=1 if DiffDev>0, 0 otherwise 

	a0 ~ dnorm(0, 0.01)
	a1 ~ dnorm(0, 0.01)
	a2 ~ dnorm(0, 0.01)
	
	beta ~ dnorm(0, 0.01)

	tau.e <- pow(sigma.e, -2)
	sigma.e ~ dgamma(2, 0.5) #dunif(0, 100)
}
